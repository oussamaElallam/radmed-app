import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { generateRadiologyReport } from '@/lib/openai';
import { createReport, createUser, getUser, getUserReports, getDailyReportCount } from '@/lib/db';

export async function POST(request: NextRequest) {
  try {
    const { userId } = await auth();
    
    if (!userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { imageData, patientInfo, language = 'en' } = body;

    if (!imageData || !Array.isArray(imageData) || imageData.length === 0) {
      return NextResponse.json(
        { error: 'Missing required field: imageData (array)' },
        { status: 400 }
      );
    }

    // Ensure user exists in database
    let user = await getUser(userId);
    if (!user) {
      // This should ideally be handled by webhook, but as fallback
      await createUser(userId, 'temp@email.com');
    }

    // --- Daily Limit Enforcement (Free Tier) ---
    // For now, assume all users are 'free' tier (no pro logic yet)
    // Count reports generated by this user today
    const dailyReportsUsed = await getDailyReportCount(userId);
    if (dailyReportsUsed >= 3) {
      return NextResponse.json({ error: 'Daily report limit reached. Upgrade to Pro for unlimited reports.' }, { status: 403 });
    }
    // --- End Daily Limit Enforcement ---

    // Generate AI report
    console.log('Generating report for user:', userId, 'with', imageData.length, 'images');
    const { report, confidence } = await generateRadiologyReport(
      imageData,
      {
        name: patientInfo?.name || '',
        age: patientInfo?.age || '',
        sex: patientInfo?.sex || '',
        modality: patientInfo?.modality || 'X-Ray',
        clinicalHistory: patientInfo?.clinicalHistory || 'Routine screening'
      },
      language
    );
    
    // Generate a unique patient ID for database storage
    const generatedPatientId = `PT-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;

    // Save report to database
    const savedReport = await createReport(
      userId,
      generatedPatientId,
      report,
      patientInfo?.modality || 'X-Ray',
      `${generatedPatientId}-${Date.now()}.jpg`,
      confidence
    );

    return NextResponse.json({
      success: true,
      report: {
        id: savedReport.id,
        content: report,
        confidence: confidence,
        patientId: generatedPatientId,
        modality: patientInfo?.modality || 'X-Ray',
        createdAt: savedReport.created_at,
        status: savedReport.status
      }
    });

  } catch (error) {
    console.error('Generate report API error:', error);
    return NextResponse.json(
      { error: 'Failed to generate report', details: (error as Error).message },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });
}
