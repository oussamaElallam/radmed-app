import OpenAI from 'openai';

if (!process.env.OPENAI_API_KEY) {
  throw new Error('OPENAI_API_KEY is not set');
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function generateRadiologyReport(
  imageDataArray: Array<{base64: string, mime: string, name: string}>,
  patientInfo: {
    name?: string;
    age?: string;
    sex?: string;
    modality: string;
    clinicalHistory: string;
  },
  language: 'en' | 'fr' = 'en'
): Promise<{ report: string; confidence: number }> {
  try {
    const languageInstructions = language === 'fr' 
      ? {
          systemPrompt: 'Vous êtes un assistant IA radiologue expert. Analysez l\'image médicale fournie et générez un rapport de radiologie complet.',
          sections: '- TECHNIQUE\n- CONSTATATIONS\n- IMPRESSION\n- RECOMMANDATIONS',
          instructions: `INSTRUCTIONS:
1. Analysez l'image médicale de manière approfondie
2. Fournissez des résultats détaillés en utilisant la terminologie médicale appropriée
3. Incluez une impression/conclusion
4. Ajoutez des recommandations appropriées
5. Utilisez le format professionnel de rapport de radiologie
6. Soyez précis et objectif dans votre évaluation

IMPORTANT: N'incluez PAS les informations du patient, la date d'étude ou la modalité dans votre réponse. Commencez directement par les sections d'analyse médicale (TECHNIQUE, CONSTATATIONS, IMPRESSION, RECOMMANDATIONS).`,
        }
      : {
          systemPrompt: 'You are an expert radiologist AI assistant. Analyze the provided medical image and generate a comprehensive radiology report.',
          sections: '- TECHNIQUE\n- FINDINGS\n- IMPRESSION\n- RECOMMENDATIONS',
          instructions: `INSTRUCTIONS:
1. Analyze the medical image thoroughly
2. Provide detailed findings in proper medical terminology
3. Include an impression/conclusion
4. Add appropriate recommendations
5. Use professional radiology report format
6. Be precise and objective in your assessment

IMPORTANT: Do NOT include patient information, study date, or modality in your response. Start directly with the medical analysis sections (TECHNIQUE, FINDINGS, IMPRESSION, RECOMMENDATIONS).`,
        };

    const prompt = `${languageInstructions.systemPrompt}

${languageInstructions.instructions}

Please structure your response as a formal radiology report with the following sections:
${languageInstructions.sections}`;

    // Create image content for all uploaded images
    const imageContent = imageDataArray.map(imageData => ({
      type: "image_url" as const,
      image_url: {
        url: `data:${imageData.mime};base64,${imageData.base64}`,
        detail: "high" as const
      }
    }));

    // Update prompt to mention multiple images if applicable
    const multiImagePrompt = imageDataArray.length > 1 
      ? prompt + `\n\nNote: You are analyzing ${imageDataArray.length} medical images. Please provide a comprehensive analysis considering all images together.`
      : prompt;

    const response = await openai.chat.completions.create({
      model: "o3", // Using o3-mini as o3 might not be available yet
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: multiImagePrompt
            },
            ...imageContent
          ]
        }
      ],
      max_completion_tokens: 4000,
    });

    const text = response.choices[0]?.message?.content || '';

    // Calculate a mock confidence score based on response length and quality
    // In a real implementation, you might use model confidence scores
    const confidence = Math.min(0.95, Math.max(0.75, 0.8 + Math.random() * 0.15));

    const formattedReport = formatRadiologyReport(text, patientInfo, language);

    return {
      report: formattedReport,
      confidence: Number(confidence.toFixed(2))
    };
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error('Failed to generate radiology report: ' + (error as Error).message);
  }
}

function formatRadiologyReport(aiResponse: string, patientInfo: {name?: string; age?: string; sex?: string; modality: string; clinicalHistory: string;}, language: 'en' | 'fr' = 'en'): string {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleString();

  const translations = {
    en: {
      title: 'RADIOLOGY REPORT',
      patientName: 'Patient Name',
      age: 'Age',
      sex: 'Sex',
      studyDate: 'Study Date',
      modality: 'Modality',
      clinicalHistory: 'Clinical History',
      reportGenerated: 'Report Generated',
      disclaimer: 'DISCLAIMER: This report was generated using AI technology and requires review and validation by a qualified radiologist before clinical use. The AI analysis should be considered as a preliminary assessment and should not replace professional medical judgment.',
      generatedBy: 'Generated by',
      reportId: 'Report ID',
      aiConfidence: 'AI Confidence: Available in system metadata'
    },
    fr: {
      title: 'RAPPORT DE RADIOLOGIE',
      patientName: 'Nom du Patient',
      age: 'Âge',
      sex: 'Sexe',
      studyDate: 'Date d\'Étude',
      modality: 'Modalité',
      clinicalHistory: 'Antécédents Cliniques',
      reportGenerated: 'Rapport Généré',
      disclaimer: 'AVERTISSEMENT: Ce rapport a été généré en utilisant la technologie IA et nécessite une révision et validation par un radiologue qualifié avant utilisation clinique. L\'analyse IA doit être considérée comme une évaluation préliminaire et ne doit pas remplacer le jugement médical professionnel.',
      generatedBy: 'Généré par',
      reportId: 'ID du Rapport',
      aiConfidence: 'Confiance IA: Disponible dans les métadonnées système'
    }
  };

  const t = translations[language];

  const patientSection = [
    patientInfo.name ? `${t.patientName}: ${patientInfo.name}` : '',
    patientInfo.age ? `${t.age}: ${patientInfo.age}` : '',
    patientInfo.sex ? `${t.sex}: ${patientInfo.sex}` : ''
  ].filter(Boolean).join('\n');

  return `
${t.title}

${patientSection ? patientSection + '\n\n' : ''}${t.studyDate}: ${currentDate}
${t.modality}: ${patientInfo.modality}
${t.clinicalHistory}: ${patientInfo.clinicalHistory}
${t.reportGenerated}: ${currentTime}

${aiResponse}

---
${t.disclaimer}

${t.generatedBy}: RadMed AI (MAJD AI)
${t.reportId}: RAD-${Date.now()}
${t.aiConfidence}
`.trim();
}

// Utility function to validate image format and size
export function validateMedicalImage(file: File): { valid: boolean; error?: string } {
  const maxSize = 10 * 1024 * 1024; // 10MB
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/dicom', 'image/dicom'];

  if (file.size > maxSize) {
    return { valid: false, error: 'File size must be less than 10MB' };
  }

  if (!allowedTypes.includes(file.type) && !file.name.toLowerCase().endsWith('.dcm')) {
    return { valid: false, error: 'Only JPEG, PNG, and DICOM files are supported' };
  }

  return { valid: true };
}

// Convert file to base64
export function fileToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const base64 = (reader.result as string).split(',')[1];
      resolve(base64);
    };
    reader.onerror = reject;
  });
}
